cmdhistory=["(def server (jetty/run-jetty \#'app {\:port 8080 \:join? false}))" "(app {\:uri \\"/hello\\"})" "(use 'clojure.repl)" "urls" "@urls" "(require '[net.cgrand.enlive-html \:as html])" "(and nil nil)" "(and seq nil)" "(and [1 2 3] nil)" "(and [1 2 3] [1 2 3])" "(and \\"blah\\" \\"blah\\")" "(mc/find db \\"users\\" {\:username \\"admin\\"})" "(mc/find db \\"users\\" {\:username \\"sadasd\\"})" "(mc/find-maps db \\"users\\" {\:username \\"sadasd\\"})" "(mc/find db \\"users\\" {\:username \\"admin\\"})" "(and () ())" "(and \\"blah\\" \\"blah\\")" "(empty? ())" "(and (true) (false))" "(and true false)" "(and false true)" "(and true true)" "(and false false)" "(mc/find-maps db \\"users\\" {\:username \\"admin\\"})" "(empty? (mc/find-maps db \\"users\\" {\:username username}))" "(empty? (mc/find-maps db \\"users\\" {\:username \\"admin\\"}))" "(empty? (mc/find-maps db \\"users\\" {\:username \\"dasdasd\\"}))" "(let [existing-password (mc/find-maps db \\"users\\" {\:password \\"blojga\\"})])" "(existing-password)" "existing-password" "(def existing-password (mc/find-maps db \\"users\\" {\:password \\"blojga\\"})])" "(def existing-password (mc/find-maps db \\"users\\" {\:password \\"blojga\\"}))" "(existing-password)" "existing-password" "(def existing-password (mc/find-maps db \\"users\\" {\:password \\"blojga\\"}))" "(def existing-password (mc/find-maps db \\"users\\" {\:password \\"admin\\"}))" "existing-password" "(and false false)" "(db/auth \\"admin\\" \\"bulja\\")" "(db/auth \\"admin\\" \\"admin\\")" "(db/auth \\"zzz\\" \\"zdas\\")" "(db/auth \\"admin\\" \\"bulja\\")" "(not-any? true false)" "(or true false)" "(or false false)" "(or false true)" "(or true true)" "(login \\"admin\\" \\"admin\\")" "(login \\"admin\\" \\"hehe\\")" "(login \\"balba\\" \\"balba\\")" "(login \\"sdaas\\" \\"dasdsa\\")" "(ns gpufinder.controller)" "(login \\"a\\" \\"a\\")" "(reg admin bla)" "(reg \\"admin\\" \\"bla\\")" "(reg \\"a\\" \\"a\\")" "(compare \\"a\\" \\"a\\")" "(\= \\"a\\" \\"a\\")" "(register \\"admin\\" \\"a\\" \\"a\\")" "(ns gpufinder.controller)" "(register \\"admin\\" \\"a\\" \\"a\\")" "(db/reg \\"a\\" \\"a\\")" "(register \\"a\\" \\"a\\" \\"a\\")" "(require '[clojure.xml \:as xml])" "(require '[clojure.zip \:as zip])" "(defn zip-str [s]\\r\\n  (zip/xml-zip \\r\\n      (xml/parse (java.io.ByteArrayInputStream. (.getBytes s)))))" "(zip-str \\"<a href\='nakkaya.com'/>\\")" "(zip-str \\"<a href\='gpuboss.com/sitemap/gpus.xml/'/>\\")" "(require clojure.java.io \:as io)" "(require '[clojure.zip \:as zip]\\r\\n         '[clojure.data.xml \:as xml]\\r\\n         '[clojure.data.zip.xml \:as xz]\\r\\n         '[clojure.java.io \:as io])" "(require '[clojure.zip \:as zip]\\r\\n            '[clojure.data.xml \:as xml]\\r\\n            '[clojure.data.zip.xml \:as xz]\\r\\n            '[clojure.java.io \:as io])" "(require '[clojure.zip \:as zip]\\r\\n         '[clojure.data.xml \:as xml]\\r\\n         '[clojure.data.zip.xml \:as xz]\\r\\n         '[clojure.java.io \:as io])" "(def data-url \\"http\://gpuboss.com/sitemap/gpus.xml\\")" "(def data (-> data-url io/reader xml/parse))" "(def z (zip/xml-zip data))" "(z)" "data" "(mapcat (comp \:content zip/node)\\r\\n        (xz/xml-> z\\r\\n                  (xz/tag\= \:content)))" "(mapcat (comp \:content zip/node)\\r\\n           (xz/xml-> z\\r\\n                     (xz/tag\= \:url)\\n                     (xz/tag\= \:loc)))" "(require [net.cgrand.enlive-html \:as html)" "(require net.cgrand.enlive-html \:as html)" "(use net.cgrand.enlive-html)" "(require net.cgrand.enlive-html \:as html)" "(require net.cgrand.enlive_html \:as html)" "(require '[net.cgrand.enlive-html \:as html])" "(require '[clojure.zip \:as zip]\\r\\n            '[clojure.data.xml \:as xml]\\r\\n            '[clojure.data.zip.xml \:as xz]\\r\\n            '[clojure.java.io \:as io])\\r\\n\\r\\n(def data-url \\"http\://gpuboss.com/sitemap/gpus.xml\\")\\r\\n\\r\\n(def data (-> data-url io/reader xml/parse))\\r\\n\\r\\n(def z (zip/xml-zip data))\\r\\n\\r\\n(mapcat (comp \:content zip/node)\\r\\n              (xz/xml-> z\\r\\n                        (xz/tag\= \:url)\\r\\n                        (xz/tag\= \:loc)))" "(defn link \\"http\://gpuboss.com/graphics-card/GeForce-GTX-660\\")" "(def link \\"http\://gpuboss.com/graphics-card/GeForce-GTX-660\\")" "(defn fetch-page [url]\\r\\n  (html/html-resource (java.net.URL. url)))" "(fetch-page link)" "(defn hn-headlines []\\r\\n  (map html/text (html/select (fetch-url link) [\:td.title \:a])))" "(defn hn-headlines []\\r\\n  (map html/text (html/select (fetch-page link) [\:td.title \:a])))" "(hn-headlines)" "(defn hn-headlines-two []\\r\\n     (map html/text (html/select (fetch-page link) [\:td.title])))" "(hn-headlines-two)" "(defn hn-headlines-two []\\r\\n        (map html/text (html/select (fetch-page link) [\:body \:h1])))" "(hn-headlines-two)" "(trim hn-headlines-two)" "(trim \\" asdasd \\")" "(use 'clojure.tools.nrepl)" "(trim hn-headlines-two)" "(use 'clojure.repl)" "(trim hn-headlines-two)" "(trim \\" bla \\")" "(use 'clojure.string)" "(trim \\" bla \\")" "(trim hn-headlines-two)" "(apply str hn-headlines-two)" "(type hn-headlines-two)" "(def odgovor hn-headlines-two)" "(trim odgovor)" "(trim '(hn-headlines-two))" "'(trim hn-headlines-two)" "(def '(odgovor) hn-headlines-two)" "(defn hn-headlines-three []\\r\\n           (my-string html/text (html/select (fetch-page link) [\:body \:h1])))" "(defn hn-headlines-three []\\r\\n              (string html/text (html/select (fetch-page link) [\:body \:h1])))" "(defn hn-headlines-three []\\r\\n                 (clojure.string html/text (html/select (fetch-page link) [\:body \:h1])))" "(defn hn-headlines-three []\\r\\n                    (clojure/string html/text (html/select (fetch-page link) [\:body \:h1])))" "(defn hn-headlines-three []\\r\\n                       (map html/text (html/select (fetch-page link) [\:body \:h1 \:span])))" "(hn-headlines-three)" "(trim hn-headlines-three)" "(read-string hn-headlines-three)" "(load-string hn-headlines-three)" "(string? hn-headlines-three)" "(map? hn-headlines-three)" "(type hn-headlines-three)" "(fn? hn-headlines-three)" "(defn foo [] \\"bar\\")" "(trim foo)" "(let string foo)" "(let [string foo])" "(string)" "(trim (foo))" "(trim (hn-headlines-three))" "(apply str (hn-headlines-three))" "(trim str)" "(trim (str))" "(trim (apply str (hn-headlines-three)))" "(count (mapcat (comp \:content zip/node)\\r\\n                 (xz/xml-> z\\r\\n                           (xz/tag\= \:url)\\r\\n                           (xz/tag\= \:loc))))" "(defn hn-headlines-three []\\r\\n                          (mapcat html/text (html/select (fetch-page link) [\:body \:h1 \:span])))" "(hn-headlines-three)" "(defn hn-headlines-three []\\r\\n                             (vec html/text (html/select (fetch-page link) [\:body \:h1 \:span])))" "(hn-headlines-three)" " (defn hn-headlines-three []\\r\\n                          (map {\:h1 html/text (html/select (fetch-page link) [\:body \:h1 \:span])}))" "(defn hn-headlines-three []\\r\\n                             (map html/text (html/select (fetch-page link) [\:body \:h1 \:span])))" "(require '[clojure.zip \:as zip]\\r\\n            '[clojure.data.xml \:as xml]\\r\\n            '[clojure.data.zip.xml \:as xz]\\r\\n            '[clojure.java.io \:as io])\\r\\n\\r\\n(def data-url \\"http\://gpuboss.com/sitemap/gpus.xml\\")\\r\\n\\r\\n(def data (-> data-url io/reader xml/parse))\\r\\n\\r\\n(def z (zip/xml-zip data))\\r\\n\\r\\n(mapcat (comp \:content zip/node)\\r\\n              (xz/xml-> z\\r\\n                        (xz/tag\= \:url)\\r\\n                        (xz/tag\= \:loc)))\\r\\n\\r\\n(def link \\"http\://gpuboss.com/graphics-card/GeForce-GTX-660\\")\\r\\n\\r\\n(defn fetch-page [url]\\r\\n     (html/html-resource (java.net.URL. url)))\\r\\n\\r\\n(fetch-page link)\\r\\n\\r\\n(defn hn-headlines-three []\\r\\n                          (map html/text (html/select (fetch-page link) [\:body \:h1 \:span])))\\r\\n\\r\\n(count (mapcat (comp \:content zip/node)\\r\\n                    (xz/xml-> z\\r\\n                              (xz/tag\= \:url)\\r\\n                              (xz/tag\= \:loc))))" "(hn-headlines-three)  \:dependencies [[org.clojure/clojure \\"1.6.0\\"]                 \\r\\n                 [com.novemberain/monger \\"2.0.1\\"]\\r\\n                 [lib-noir \\"0.9.9\\"]\\r\\n                 [ring \\"1.3.2\\"]\\r\\n                 [compojure \\"1.3.4\\"]\\r\\n                 [enlive \\"1.1.5\\"]\\r\\n                 [de.ubercode.clostache/clostache \\"1.4.0\\"]\\r\\n                 [org.clojure/data.xml \\"0.0.8\\"]\\r\\n                 [org.clojure/data.zip \\"0.1.1\\"]]\\r\\n\\r\\n(require '[clojure.zip \:as zip]\\r\\n            '[clojure.data.xml \:as xml]\\r\\n            '[clojure.data.zip.xml \:as xz]\\r\\n            '[clojure.java.io \:as io])\\r\\n\\r\\n(def data-url \\"http\://gpuboss.com/sitemap/gpus.xml\\")\\r\\n\\r\\n(def data (-> data-url io/reader xml/parse))\\r\\n\\r\\n(def z (zip/xml-zip data))\\r\\n\\r\\n(mapcat (comp \:content zip/node)\\r\\n              (xz/xml-> z\\r\\n                        (xz/tag\= \:url)\\r\\n                        (xz/tag\= \:loc)))\\r\\n\\r\\n(def link \\"http\://gpuboss.com/graphics-card/GeForce-GTX-660\\")\\r\\n\\r\\n(defn fetch-page [url]\\r\\n     (html/html-resource (java.net.URL. url)))\\r\\n\\r\\n(fetch-page link)\\r\\n\\r\\n(defn hn-headlines-three []\\r\\n                          (map html/text (html/select (fetch-page link) [\:body \:h1 \:span])))\\r\\n\\r\\n(count (mapcat (comp \:content zip/node)\\r\\n                    (xz/xml-> z\\r\\n                              (xz/tag\= \:url)\\r\\n                              (xz/tag\= \:loc))))" "(require '[clojure.zip \:as zip]\\r\\n            '[clojure.data.xml \:as xml]\\r\\n            '[clojure.data.zip.xml \:as xz]\\r\\n            '[clojure.java.io \:as io])" "(def data-url \\"http\://gpuboss.com/sitemap/gpus.xml\\")" "(def data (-> data-url io/reader xml/parse))" "(def z (zip/xml-zip data))" "(mapcat (comp \:content zip/node)\\r\\n              (xz/xml-> z\\r\\n                        (xz/tag\= \:url)\\r\\n                        (xz/tag\= \:loc)))" "(def link \\"http\://gpuboss.com/graphics-card/GeForce-GTX-660\\")" "(defn fetch-page [url]\\r\\n     (html/html-resource (java.net.URL. url)))" "(require [net.cgrand.enlive-html \:as html])" "(require '[net.cgrand.enlive-html \:as html])" "(defn fetch-page [url]\\r\\n     (html/html-resource (java.net.URL. url)))" "(defn hn-headlines-three []\\r\\n                          (map html/text (html/select (fetch-page link) [\:body \:h1 \:span])))" "(count (mapcat (comp \:content zip/node)\\r\\n                    (xz/xml-> z\\r\\n                              (xz/tag\= \:url)\\r\\n                              (xz/tag\= \:loc))))" "(doseq [n (range 3)]\\r\\n  (println n))" "(all-gpus)" "(get all-gpus 0)" "(all-gpus)" "(doseq [x (all-gpus)] (println x))" "(for [x (all-gpus)]\\n  (println (hn-headlines-three x)))" "(doseq [x (all-gpus)]\\r\\n     (println (hn-headlines-three x)))" "(for [x (all-gpus)]\\n  (println (type x)))" "(doseq [x (all-gpus)] (println x))" "(for [x (all-gpus)]\\r\\n     (println (type x)))" "(for [x (all-gpus)]\\r\\n     (println (hn-headlines-three x)))" "(hn-headlines-three \\"http\://gpuboss.com/graphics-card/GeForce-GTX-960\\")" "(def bla (hn-headlines-three \\"http\://gpuboss.com/graphics-card/GeForce-GTX-960\\"))" "(type bla)" "(hn-headlines-three \\"http\://gpuboss.com/graphics-card/GeForce-GTX-960\\")" "(apply hash-map (hn-headlines-three)))" "(apply hash-map (hn-headlines-three))" "(zipmap fields (hn-headlines-three))" "(zipmap fields (hn-headlines-three \\"http\://gpuboss.com/graphics-card/GeForce-GTX-960\\"))" "(apply hash-map (hn-headlines-three \\"http\://gpuboss.com/graphics-card/GeForce-GTX-960\\"))" "(zipmap fields (hn-headlines-three \\"http\://gpuboss.com/graphics-card/GeForce-GTX-960\\"))" "(def heshmapa (zipmap fields (hn-headlines-three \\"http\://gpuboss.com/graphics-card/GeForce-GTX-960\\")))" "(heshmapa)" "(type heshmapa)" "(heshmapa \:model)" "(hn-headlines-three \\"http\://gpuboss.com/graphics-card/GeForce-GTX-960\\")" "(html/first-child)" "(hn-headlines-three \\"http\://gpuboss.com/graphics-card/GeForce-GTX-960\\")" "(gpu-data \\"http\://gpuboss.com/graphics-card/GeForce-GTX-960\\")" "(hn-headlines-three \\"http\://gpuboss.com/graphics-card/GeForce-GTX-960\\")" "(scrape-data \\"http\://gpuboss.com/graphics-card/GeForce-GTX-960\\")" "(zipmap fields (scrape-data \\"http\://gpuboss.com/graphics-card/GeForce-GTX-960\\"))" "(testiranje \:type)" "(if (\= (testiranje \:type) \\"Desktop\\")\\n  \\"jeste\\"\\n  \\"nije\\")" "(order-scraped-data \\"http\://gpuboss.com/graphics-card/GeForce-GTX-660\\")" "(type (order-scraped-data \\"http\://gpuboss.com/graphics-card/GeForce-GTX-660\\")" "(type (order-scraped-data \\"http\://gpuboss.com/graphics-card/GeForce-GTX-660\\"))" "     (if(\= (let [gpu (order-scraped-data \\"http\://gpuboss.com/graphics-card/GeForce-GTX-960\\")]) \\"Desktop\\")\\r\\n\\"jeste\\"\\n\\"nije\\")" "(let [gpu (order-scraped-data \\"http\://gpuboss.com/graphics-card/GeForce-GTX-660\\")])" "(if-let [gpu (order-scraped-data \\"http\://gpuboss.com/graphics-card/GeForce-GTX-960\\")]\\n  (\= gpu \\"Desktop\\")\\r\\n   \\"jeste\\"\\r\\n   \\"nije\\")" "(let [gpu (order-scraped-data \\"http\://gpuboss.com/graphics-card/GeForce-GTX-660\\")]\\n  (if (\= (gpu \:type) \\"Desktop\\")\\n    \\"jeste\\"\\n    \\"nije\\"))" "(is-desktop \\"http\://gpuboss.com/graphics-card/GeForce-GTX-960\\")" "(is-desktop-two \\"http\://gpuboss.com/graphics-card/GeForce-GTX-960\\")" "(def a \\"llll\\")" "(def b false)" "(if a\\n  true\\n  false)" "(insert-gpu-into-db \\"http\://gpuboss.com/graphics-card/GeForce-GTX-960\\")" "(insert-gpu-into-db \\"http\://gpuboss.com/graphics-card/Radeon-R9-M370X-Mac\\")" "(reg \\"pera\\" \\"pera\\")" " (reg \\"pera\\" \\"pera\\")" " (reg \\"zz\\" \\"zz\\")" "(mc/find maps db \\"users\\" {\:username \\"zz\\"})" "(mc/find-maps db \\"users\\" {\:username \\"zz\\"})" "(mc/update db \\"users\\" {\:username \\"zz\\"} {\:wishlist {\:pera \\"pera\\" \:zika \\"zika\\"}})" "(mc/update db \\"users\\" {\:username \\"pera\\"} {\:wishlist {\:pera \\"pera\\" \:zika \\"zika\\"}})" "(reg \\"zz\\" \\"zz\\")" "   (mc/update db coll \\"users\\" {\:username \\"zz\\"} {\:wishlist {\:pera \\"pera\\" \:zika \\"zika\\"}})" "(mc/update db coll {\:username \\"zz\\"} {\:wishlist {\:pera \\"pera\\" \:zika \\"zika\\"}})" "(mc/insert db \\"users\\" {\:username \\"zz\\"} {\:wishlist {\:pera \\"pera\\" \:zika \\"zika\\"}})" "(mc/insert db \\"users\\" {\:username \\"zz\\" \:wishlist {\:pera \\"pera\\" \:zika \\"zika\\"}})" "(def juzr (mc/find maps db \\"users\\" {\:username \\"zz\\"}))" "(def juzr (mc/find-maps db \\"users\\" {\:username \\"zz\\"}))" "(juzr)" "juzr" "(mc/find-maps db \\"users\\" {\:username \\"zz\\"})" "(reg \\"zz\\" \\"zz\\")" "juzr" "(def juzr (mc/find-maps db \\"users\\" {\:username \\"zz\\"}))" "juzr" "(juzr \:_id)" "(\:_id juzr)" "\:_id juzr" "juzr" "(type juzr)" "(apply hash-map juzr)" "(mc/update db \\"users\\" {\:username \\"zz\\"} {\:wishlist {\:pera \\"pera\\" \:zika \\"zika\\"}})" "(reg \\"zz\\" \\"zz\\")" "(mc/update db \\"users\\" {\:username \\"zz\\"} {\:wishlist \\"lo\\"})" "(reg \\"zz\\" \\"zz\\")" "(mc/update db \\"users\\" {\:username \\"zz\\"} {\:wishlist {\:pera \\"pera\\" \:zika \\"zika\\"}} {\:upsert true})" "(reg \\"zz\\" \\"zz\\")" "(mc/update db  {\:username \\"zz\\"} {$push {\:wishlist {\:pera \\"pera\\" \:zika \\"zika\\"}})" "(mc/update db  {\:username \\"zz\\"} {$push {\:wishlist {\:pera \\"pera\\" \:zika \\"zika\\"}}})" "(require ' [monger.operators \:refer \:all])" "(mc/update db  {\:username \\"zz\\"} {$push {\:wishlist {\:pera \\"pera\\" \:zika \\"zika\\"}}})" "(mc/update db \\"users\\" {\:username \\"zz\\"} {$push {\:wishlist {\:pera \\"pera\\" \:zika \\"zika\\"}}})" " (mc/update  db \\"users\\" {\:username \\"zz\\"} {\:_id oid} {$addToSet {\:wishlist {\:pera \\"pera\\" \:zika \\"zika\\"}}}})" "(mc/update db \\"users\\" {\:username \\"zz\\"} {$addToSet {\:wishlist {\:pera \\"pera\\" \:zika \\"zika\\"}}})" "(mc/update db \\"users\\" {\:username \\"zz\\"} {$push {\:wishlist {\:pera \\"pera\\" \:zika \\"zika\\"}}})" "(mc/update db \\"users\\" {\:_id oid} {$pushAll {\:wishlist {\:pera \\"pera\\" \:zika \\"zika\\"}}})" "(mc/update db \\"users\\" {\:username \\"zz\\"} {$pushAll {\:wishlist {\:pera \\"pera\\" \:zika \\"zika\\"}}})" "(mc/update db \\"users\\" {\:username \\"zz\\"} {$pushAll {\:wishlist {\\"pera\\" \\"zika\\"}}})" "(mc/update db \\"users\\" {\:username \\"zz\\"} {$pushAll {\:wishlist [\\"pera\\" \\"zika\\"]}})" "(all-gpus)" "(for [x (scrapper/all-gpus)]\\n   (let [gpu (scrapper/order-scraped-data x)]\\n     (println x)))" "(for [x (all-gpus)]\\r\\n      (let [gpu (order-scraped-data x)]\\r\\n        (println x)))" "(for [x (all-gpus)]\\r\\n         (let [gpu (order-scraped-data x)]\\r\\n           (println gpu)))" "(for [x (all-gpus)]\\r\\n   (let [gpu (scrapper/order-scraped-data x)]\\r\\n   (if (\= (gpu \:type) \\"Desktop\\")\\r\\n   (println (gpu \:url)))))" "(for [x (all-gpus)]\\r\\n      (let [gpu (order-scraped-data x)]\\r\\n      (if (\= (gpu \:type) \\"Desktop\\")\\r\\n      (println (gpu \:url)))))" "(initialize-gpus)" "(initialize-data)" "(def bla {\:id 1 \:username \\"test\\" \:password \\"test\\" })" "(alength bla)" "(count bla)" "(scrape-data \\"http\://gpuboss.com/graphics-card/GeForce-GTX-960\\")" "(to-numeric \\"z123\\")" "(to-numeric \\"123.2312\\")" "(update-vals (scrapper/scrape-data \\"http\://gpuboss.com/graphics-card/GeForce-GTX-960\\") [\:tdp \:price \:vram] to-numeric)" "(def mapa (scrapper/scrape-data \\"http\://gpuboss.com/graphics-card/GeForce-GTX-960\\"))" "(update-vals mapa [\:tdp \:price \:vram] to-numeric)" "(scrapper/order-scraped-data \\"http\://gpuboss.com/graphics-card/GeForce-GTX-960\\")" "(def test-gpu (scrapper/order-scraped-data \\"http\://gpuboss.com/graphics-card/GeForce-GTX-960\\"))" "(gpu-without-letters test-gpu)" "(search-gpu-db \\"bla\\")" "(mc/find-maps db \\"gpus\\" {\:tdp 500})" "(mc/find-maps db \\"gpus\\" {\:tdp 120})" "(mc/find-maps db \\"gpus\\" {\:tdp 180})" "(mc/find-maps db \\"gpus\\" {\:tdp 148})" "(mc/find-maps db \\"gpus\\" {\:vram 4096})" "(mc/find db \\"gpus\\" {\:vram 4096})" "(mc/find-maps db \\"users\\" {\:username \\"admin\\"})" "(mc/find-maps db \\"gpus\\" {\:vram 4096})" "(mc/find-maps db \\"gpus\\" {\:vram \\"4096\\"})" "(str \\"bl\\" \\"ahaha\\")" "(str query \\"{\:price \\" \\"gomila\\" \\"}\\")" " (str \\"\\" \\"{\:price \\" \\"gomila\\" \\"}\\")" "(defn return-string [num]\\n  (cond\\n    ((> num 0) && (< num 100) \\"stotka\\")\\n    ((> num 100) && (< num 200) \\"dvestotka\\")))" "(defn return-string [num]\\r\\n     (cond\\r\\n       ((> num 0) & (< num 100) \\"stotka\\")\\r\\n       ((> num 100) & (< num 200) \\"dvestotka\\")))" "(defn return-string [num]\\r\\n        (cond\\r\\n          ((> num 0) & (< num 100)) \\"stotka\\")\\r\\n          ((> num 100) & (< num 200)) \\"dvestotka\\")))" " (defn return-string [num]\\r\\n           (cond\\r\\n             (((> num 0) & (< num 100)) \\"stotka\\")\\r\\n             ((> num 100) & (< num 200)) \\"dvestotka\\"))" "(defn return-string [num]\\r\\n              (cond\\r\\n                (and ((cond (> num 0)) (cond (< num 100))) \\"stotka\\")\\r\\n                (and ((cond (> num 100)) (cond (< num 200))) \\"dvestotka\\"))\\n              )" "(defn return-string [num]\\r\\n                 (cond\\r\\n                   (and (cond (> num 0)) (cond (< num 100)) \\"stotka\\")\\r\\n                   (and (cond (> num 100)) (cond (< num 200)) \\"dvestotka\\")))" "(defn return-string [num]\\r\\n                    (if\\r\\n                      (and (cond (> num 0)) (cond (< num 100)) \\"stotka\\")\\r\\n                      (and (cond (> num 100)) (cond (< num 200)) \\"dvestotka\\")))" "(def cond1\\n  (cond (> num 0)))" "(defn return-string [num]\\r\\n                       (if (and (> num 0) (< num 500))\\r\\ntrue\\nfalse))" "(return-string 300)" "(return-string 1231)" "(defn return-string [num]\\r\\n(if (and (> num 0) (< num 500))\\r\\n   true))" "(return-string 400)" "(defn return-string [num]\\r\\n   (if (and (> num 0) (< num 500))\\r\\n      \\"izmedju 0 i 500\\")\\n      (if (and (> num 500) (< num 1000))\\r\\n      \\"izmedju 500 i 1000\\"))" "(return-string 521)" "(find-gpu 32 1024 500)" "(str \\"\\" \\"{\:price \\" \\"22\\" \\"}\\")" "(find-gpu 32 1024 500)" "(find-gpu \\"z\\" \\"z\\" \\"z\\")" "(find-gpu 32 1024 500)" "find-gpu 32 1024 500)" "(find-gpu 32 1024 500)" "(find-gpu \\"$lt <  5000\\" \\"$gt > 1024\\" 500)" "(find-gpu \\"$lt <  5000\\" \\"$gt > 1024\\" 800)" "(find-gpu \\"$lt <  5000\\" \\"$gt > 1024\\" \\"haha\\")" "(validate-psu 400)" "(return-tdp 230)" "(return-tdp 530)" "(return-tdp 230)" "(return-tdp 500)" "(return-tdp 800)" "(find-gpu \\"$lt <  5000\\" \\"$gt > 1024\\" 800)" "(validate-psu 500)" "(return-tdp 500)" "(validate-psu 500)" "(return-tdp 500)" "(validate-psu 500)" "(validate-psu \\"sada\\")" "(find-gpu \\"$lt <  5000\\" \\"$gt > 1024\\" 800)" "(validate-psu 400)" "(mc/find-maps db \\"gpus\\" {\:tdp \\"$lt < 400\\" \:vram \\"$gt > 1024\\" \:price \\"$lt < 30000\\"})" "(mc/find-maps db \\"gpus\\" {\:tdp 180})" "(mc/find-maps db \\"gpus\\" {\:tdp 148})" "(mc/find-maps db \\"gpus\\" {\:tdp \\"148\\"})" "(mc/find-maps db \\"gpus\\" {\:tdp $lt < 400})" "(mc/find-maps db \\"gpus\\" {\:tdp $lt \: 400})" "(mc/find-maps db \\"gpus\\" {\:tdp {$lt \: 400}})" "(mc/find-maps db \\"gpus\\" {tdp\: {$lt \: 400}})" "(mc/find-maps db \\"gpus\\" {\:tdp {\\"$lt\\" 400}})" "(mc/find db \\"gpus\\" {\:tdp {\\"$lt\\" 400}})" "(mc/find-maps db \\"gpus\\" {\:tdp {$lt 400}})" "(mc/find-maps db \\"gpus\\" {\:tdp {\\"$lt\\" 400}})" "(mc/find db \\"gpus\\" {\:tdp {\\"$lt\\" \\"400\\"}})" "(mc/find-maps db \\"gpus\\" {\:tdp {\\"$lt\\" \\"400\\"}})" "(mc/find db \\"gpus\\" {\:tdp {\\"$lt\\" \\"100\\"}})" "(mc/find-maps db \\"gpus\\" {\:tdp {\\"$lt\\" \\"100\\"}})" "(mc/find-maps db \\"gpus\\" {\:tdp {\\"$lt\\" \\"200\\"}})" "(mc/find-maps db \\"gpus\\" {\:tdp {\\"$lt\\" \\"130\\"}})" "(scrape-data \\"http\://gpuboss.com/graphics-card/GeForce-GTX-750-Ti\\")" "(scrape-data \\"http\://gpuboss.com/graphics-card/GeForce-GTX-750\\")" "(order-scraped-data \\"http\://gpuboss.com/graphics-card/GeForce-GTX-750\\")" "(mc/find-maps db \\"gpus\\" {\:tdp {\\"$lt\\" \\"60\\"}})" "(mc/find-maps db \\"gpus\\" {\:tdp {\\"$lt\\" \\"500\\"}})" "(mc/find-maps db \\"gpus\\" {\:tdp {\\"$lt\\" \\"100\\"}})" "(mc/find-maps db \\"gpus\\" {\:tdp {\\"$lt\\" 100}})" "(mc/find-maps db \\"gpus\\" {\:tdp {\\"$lt\\" 500}})" "(mc/insert db \\"gpus\\" {\:int \:intizdzer 123})" "(mc/insert db \\"gpus\\" {\:int 123})" "(order-scraped-data \\"http\://gpuboss.com/graphics-card/GeForce-GTX-750\\")" "(initialize-gpus)" "(mc/find-maps db \\"gpus\\" {\:tdp {\\"$lt\\" 100}})" "(mc/find-maps db \\"gpus\\" {\:tdp {\\"$lt\\" 80}})" "(validate-psu 300)" "(find-gpu 50000 1024 400)" "(defn atomz (find-gpu 50000 1024 400))" "(def atomz (find-gpu 50000 1024 400))" "(atomz \:tdp)" "(@atomz \:tdp)" "(def mojAtom (atom {\:tdp \\"/\\"$lt/\\" 250\\" \:vram \\"/\\"$gt/\\" 24000\\" \:price \\"/\\"$gt/\\" 20000, /\\"$lt/\\" 25000\\"}))" "(def mojAtom (atom {\:tdp \\"\\\\\\"$lt\\\\\\" 250\\" \:vram \\"\\\\\\"$gt\\\\\\" 24000\\" \:price \\"\\\\\\"$gt\\\\\\" 20000, \\\\\\"$lt\\\\\\" 25000\\"}))" "(find-gpu-in-db mojAtom)" "(@mojAtom \:vram)" "(find-gpu-in-db mojAtom)" "(get-prices-from-string \\"1500|2500\\")" "(get-prices-from-string \\"1500 | 2500\\")" "(get-prices-from-string \\"1500|2500\\")" "(get-prices-from-string \\"1500\:2500\\")" "(get-prices-from-string \\"1500 2500\\")" "(get-prices-from-string \\"1500\:2500\\")" "(get-prices-from-string \\"1500 2500\\")" "(find-gpu-in-db mojAtom)" "(return-tdp \\"-230\\")" "(return-tdp -230)" "(return-tdp 430)" "(validate-psu -31)" "(validate-psu \\"-512\\")" "(validate-psu \\"hgasda1231\\")" "(find-gpu-in-db mojAtom)" "@mojAtom2" "(find-gpu \\"5000 10000\\" \\"1024\\" \\"450\\")" "(validate-psu \\"450\\")" "(validate-psu 450)" "(validate-psu \\"450\\")" "(validate-psu 450)" "(find-gpu \\"5000 10000\\" \\"1024\\" \\"450\\")" "(find-gpu \\"5000 10000\\" \\"1024\\" \\"230\\")" "(find-gpu \\"5000 10000\\" \\"1024\\" \\"150\\")" "(find-gpu \\"5000 10000\\" \\"1024\\" \\"800\\")" "(find-gpu \\"5000 10000\\" \\"2048\\" \\"230\\")" "(validate-psu \\"sadasd\\")" "(validate-psu \\"231\\")" "(number? \\"231\\")" "(number? (read-string \\"321\\"))" "(validate-psu \\"231\\")" "(validate-psu \\"sadasd\\")" "(validate-psu \\"sad\\")" "(validate-psu \\"231\\")" "(find-gpu \\"5000 10000\\" \\"1024\\" \\"800\\")" "(vector (find-gpu \\"5000 10000\\" \\"1024\\" \\"800\\"))" "(conj {\:results} (vector (find-gpu \\"5000 10000\\" \\"1024\\" \\"800\\")))" "(conj \\"results\\" (vector (find-gpu \\"5000 10000\\" \\"1024\\" \\"800\\")))" "(map \:results (vector (find-gpu \\"5000 10000\\" \\"1024\\" \\"800\\")))" "(map {\:results (vector (find-gpu \\"5000 10000\\" \\"1024\\" \\"800\\")) })" "(def mapa {\:results (vector (find-gpu \\"5000 10000\\" \\"1024\\" \\"800\\")) })" "(mapa)" "mapa" "(find-gpu \\"5000 10000\\" \\"1024\\" \\"800\\")" "'(1 2 3)" "(1 2 3)" "(apply '(1 2 3))" "(find-gpu \\"5000 10000\\" \\"1024\\" \\"800\\")" "(find-gpu \\"0\\" \\"0\\" \\"600\\")" "(find-gpu \\"10000 20000\\" \\"0\\" \\"450\\")" "(mc/find-one db \\"gpus\\" { \:_id (ObjectId. \\"55804d039a74086417a1a50c\\") })"]
eclipse.preferences.version=1
